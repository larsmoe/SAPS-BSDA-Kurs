{"type":["init_ps"],"time":["2017-05-18 14:45:55"],"user":["Seb"],"umph":[1495111555.9904],"ok":[true]}
,
{"type":["check_chunk"],"time":["2017-05-18 14:46:21"],"user":["Seb"],"umph":[1495111581.8397],"ok":[true],"chunk":[1],"ex":[1],"e.ind":[0],"code":["#Laden des Datensatzes \"Terrornetzwerk_Datensatz.csv\"\nterrornet <- read.csv(\"Terrornetzwerk_Datensatz.csv\", sep=\";\", header = FALSE)\n#Erstellen des Graphen g_terrornet\ng_terrornet <- graph_from_data_frame(d=terrornet, directed=FALSE)\n#Plotten des Graphen g_terrornet\nplot(x=g_terrornet, vertex.label.dist=0.2, vertex.size = 5, vertex.label.cex=0.8)"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-05-18 14:46:27"],"user":["Seb"],"umph":[1495111587.7981],"ok":[true],"chunk":[2],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie die Degree Centrality für alle Knoten in g_terrornet\n#und speichern Sie die Werte in der Variable C_D_terror\nC_D_terror <- degree(graph=g_terrornet, loops=FALSE)\n#Verfahren Sie analog für die normierte Degree Centrality und\n#speichern Sie das Ergebnis in der Variable C_Dnorm_terror\nC_Dnorm_terror <- degree(graph=g_terrornet, loops=FALSE, normalized = TRUE)\n#Geben Sie zuerst die ersten sechs Werte des absteigend sortierten \n#Vektors C_D_terror aus und verfahren Sie anschließend analog \n#mit dem Vektor C_Dnorm_terror; Verwenden Sie dazu die Befehle head und sort\n#und speichern Sie die Werte in den Variablen C_D_terror_main bzw. \n#C_Dnorm_terror_main\n#Tipp: head gibt per default sechs Zeilen zurück\nC_D_terror_main <- head(x=sort(x=C_D_terror, decreasing = TRUE))\nC_Dnorm_terror_main <- head(x=sort(x=C_Dnorm_terror, decreasing = TRUE))\n#Lassen Sie sich beide Variablen ausgeben\nC_D_terror_main\nC_Dnorm_terror_main"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-05-18 14:46:30"],"user":["Seb"],"umph":[1495111590.679],"ok":[true],"chunk":[3],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie die Closeness Centrality für alle Knoten in g_terrornet\n#und speichern Sie die Werte in der Variable C_C_terror\nC_C_terror <- closeness(graph=g_terrornet)\n#Verfahren Sie analog für die normierte Closeness Centrality und\n#speichern Sie das Ergebnis in der Variable C_Cnorm_terror\nC_Cnorm_terror <- closeness(graph=g_terrornet, normalized = TRUE)\n#Ermittlung der ersten sechs Werte des absteigend sortierten \n#Vektors C_C_terror bzw. C_Cnorm_terror; \n#Speichern der Werte in den Variablen C_C_terror_main bzw. \n#C_Cnorm_terror_main\nC_C_terror_main <- head(x=sort(x=C_C_terror, decreasing = TRUE))\nC_Cnorm_terror_main <- head(x=sort(x=C_Cnorm_terror, decreasing = TRUE))\n#Ausgabe der beiden Variablen\nC_C_terror_main\nC_Cnorm_terror_main"],"message":[""]}
,
{"type":["init_ps"],"time":["2017-06-06 10:38:58"],"user":["Seb"],"umph":[1496738338.7374],"ok":[true]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:07"],"user":["Seb"],"umph":[1496738347.1243],"ok":[true],"chunk":[1],"ex":[1],"e.ind":[0],"code":["#Laden des Datensatzes \"Terrornetzwerk_Datensatz.csv\"\nterrornet <- read.csv(\"Terrornetzwerk_Datensatz.csv\", sep=\";\", header = FALSE)\n#Erstellen des Graphen g_terrornet\ng_terrornet <- graph_from_data_frame(d=terrornet, directed=FALSE)\n#Plotten des Graphen g_terrornet\nplot(x=g_terrornet, vertex.label.dist=0.2, vertex.size = 5, vertex.label.cex=0.8)"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:13"],"user":["Seb"],"umph":[1496738353.6628],"ok":[true],"chunk":[2],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie die Degree Centrality für alle Knoten in g_terrornet\n#und speichern Sie die Werte in der Variable C_D_terror\nC_D_terror <- degree(graph=g_terrornet, loops=FALSE)\n#Verfahren Sie analog für die normierte Degree Centrality und\n#speichern Sie das Ergebnis in der Variable C_Dnorm_terror\nC_Dnorm_terror <- degree(graph=g_terrornet, loops=FALSE, normalized = TRUE)\n#Geben Sie zuerst die ersten sechs Werte des absteigend sortierten \n#Vektors C_D_terror aus und verfahren Sie anschließend analog \n#mit dem Vektor C_Dnorm_terror; Verwenden Sie dazu die Befehle head und sort\n#und speichern Sie die Werte in den Variablen C_D_terror_main bzw. \n#C_Dnorm_terror_main\n#Tipp: head gibt per default sechs Zeilen zurück\nC_D_terror_main <- head(x=sort(x=C_D_terror, decreasing = TRUE))\nC_Dnorm_terror_main <- head(x=sort(x=C_Dnorm_terror, decreasing = TRUE))\n#Lassen Sie sich beide Variablen ausgeben\nC_D_terror_main\nC_Dnorm_terror_main"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:16"],"user":["Seb"],"umph":[1496738356.5578],"ok":[true],"chunk":[3],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie die Closeness Centrality für alle Knoten in g_terrornet\n#und speichern Sie die Werte in der Variable C_C_terror\nC_C_terror <- closeness(graph=g_terrornet)\n#Verfahren Sie analog für die normierte Closeness Centrality und\n#speichern Sie das Ergebnis in der Variable C_Cnorm_terror\nC_Cnorm_terror <- closeness(graph=g_terrornet, normalized = TRUE)\n#Ermittlung der ersten sechs Werte des absteigend sortierten \n#Vektors C_C_terror bzw. C_Cnorm_terror; \n#Speichern der Werte in den Variablen C_C_terror_main bzw. \n#C_Cnorm_terror_main\nC_C_terror_main <- head(x=sort(x=C_C_terror, decreasing = TRUE))\nC_Cnorm_terror_main <- head(x=sort(x=C_Cnorm_terror, decreasing = TRUE))\n#Ausgabe der beiden Variablen\nC_C_terror_main\nC_Cnorm_terror_main"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:19"],"user":["Seb"],"umph":[1496738359.6808],"ok":[true],"chunk":[4],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie die Betweenness Centrality für alle Knoten in g_terrornet\n#und speichern Sie die Werte in der Variable C_B_terror\nC_B_terror <- betweenness(graph=g_terrornet)\n#Verfahren Sie analog für die normierte Betweenness Centrality und\n#speichern Sie das Ergebnis in der Variable C_Bnorm_terror\nC_Bnorm_terror <- betweenness(graph=g_terrornet, normalized = TRUE)\n#Ermittlung der ersten sechs Werte des absteigend sortierten \n#Vektors C_B_terror bzw. C_Bnorm_terror;\n#Speichern der Werte in den Variablen C_B_terror_main bzw.\nC_B_terror_main <- head(x=sort(x=C_B_terror, decreasing = TRUE))\nC_Bnorm_terror_main <- head(x=sort(x=C_Bnorm_terror, decreasing = TRUE))\n#Ausgabe der beiden Variablen\nC_B_terror_main\nC_Bnorm_terror_main"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:22"],"user":["Seb"],"umph":[1496738362.4192],"ok":[true],"chunk":[5],"ex":[1],"e.ind":[0],"code":["#Vergleichen Sie die Namen von C_D_terror_main und C_C_terror_main\nnames(x=C_D_terror_main) == names(x=C_C_terror_main)\n#Vergleichen Sie die Namen von C_C_terror_main und C_B_terror_main\nnames(x=C_C_terror_main) == names(x=C_B_terror_main)\n#Lassen Sie sich die Namen von C_D_terror_main ausgeben\nC_D_terror_main"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:24"],"user":["Seb"],"umph":[1496738364.9138],"ok":[true],"chunk":[6],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie die Eigenvector Centrality für alle Knoten von g_terrornet\n#und speichern Sie die ausgegebene Liste in der Variable C_E_terror\nC_E_terror <- eigen_centrality(graph=g_terrornet)"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:27"],"user":["Seb"],"umph":[1496738367.4307],"ok":[true],"chunk":[7],"ex":[1],"e.ind":[0],"code":["#Bestimmung des Knotens mit der größten Eigenvector Centrality\nwhich.max(x=C_E_terror[[1]])\n#Bestimmung dieses größten Eigenvector Centrality-Werts im Netzwerk\nmax(x=C_E_terror[[1]])"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:31"],"user":["Seb"],"umph":[1496738371.4172],"ok":[true],"chunk":[8],"ex":[1],"e.ind":[0],"code":["#Laden des Packages 'igraphdata'\nlibrary(igraphdata)\n#Laden des Datensatzes UKfaculty\ndata(\"UKfaculty\")\n#Plotten des Graphen\nplot(x=UKfaculty, vertex.size = 5, vertex.label.cex=0.8, edge.arrow.size = 0.4)"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:34"],"user":["Seb"],"umph":[1496738374.939],"ok":[true],"chunk":[9],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie den PageRank für alle Knoten von UKfaculty\n#und speichern Sie die resultierende Liste in der Variable C_R_UKfaculty\nC_R_UKfaculty <- page_rank(graph=UKfaculty)\n#Geben Sie mit dem Befehl head die ersten sechs Elemente des\n#ersten Listenelements (die PageRanks) von C_R_UKfaculty aus\n#Tipp: Werfen Sie nochmals einen Blick auf den zweiten Code-Chunk in 6d)\nhead(x=C_R_UKfaculty[[1]])\n#Geben Sie das Maximum des ersten Listenelements (die PageRanks) \n#von C_R_UKfaculty aus\nmax(x=C_R_UKfaculty[[1]])"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:43"],"user":["Seb"],"umph":[1496738383.9314],"ok":[true],"chunk":[9],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie den PageRank für alle Knoten von UKfaculty\n#und speichern Sie die resultierende Liste in der Variable C_R_UKfaculty\nC_R_UKfaculty <- page_rank(graph=UKfaculty)\n#Geben Sie mit dem Befehl head die ersten sechs Elemente des\n#ersten Listenelements (die PageRanks) von C_R_UKfaculty aus\n#Tipp: Werfen Sie nochmals einen Blick auf den zweiten Code-Chunk in 6d)\nhead(x=C_R_UKfaculty[[1]])\n#Geben Sie das Maximum des ersten Listenelements (die PageRanks) \n#von C_R_UKfaculty aus\nmax(x=C_R_UKfaculty[[1]])"],"message":[""]}
,
{"type":["check_chunk"],"time":["2017-06-06 10:39:54"],"user":["Seb"],"umph":[1496738394.5032],"ok":[true],"chunk":[9],"ex":[1],"e.ind":[0],"code":["#Berechnen Sie den PageRank für alle Knoten von UKfaculty\n#und speichern Sie die resultierende Liste in der Variable C_R_UKfaculty\nC_R_UKfaculty <- page_rank(graph=UKfaculty)\n#Geben Sie mit dem Befehl head die ersten sechs Elemente des\n#ersten Listenelements (die PageRanks) von C_R_UKfaculty aus\n#Tipp: Werfen Sie nochmals einen Blick auf den zweiten Code-Chunk in 6d)\nhead(x=C_R_UKfaculty[[1]])\n#Geben Sie das Maximum des ersten Listenelements (die PageRanks) \n#von C_R_UKfaculty aus\nmax(x=C_R_UKfaculty[[1]])"],"message":[""]}
,
{"type":["init_ps"],"time":["2018-04-11 22:41:19"],"user":["default_user"],"umph":[1523479279.1061],"ok":[true]}
,
